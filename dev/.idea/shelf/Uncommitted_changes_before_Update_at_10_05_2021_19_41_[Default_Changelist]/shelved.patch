Index: src/BusinessLayer/StockBusiness/instance/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BusinessLayer.StockBusiness.instance;\r\n\r\nimport DAL.DALObject;\r\nimport DAL.DalStock.DALProduct;\r\nimport DAL.DalStock.DALStoreController;\r\nimport DAL.Mapper;\r\nimport Utility.Tuple;\r\nimport Utility.Util;\r\nimport org.apache.log4j.Logger;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class Product {\r\n    DALProduct dal;\r\n   // private Location _location;\r\n    final static Logger log=Logger.getLogger(Product.class);\r\n\r\n    public Product(int storeId,int typeID,int id, Date expiration, Tuple<Integer,Location> shelf) {\r\n        checkLocation(shelf);\r\n        //dal= Util.initDal(DALProduct.class,storeId,id,typeID,expiration.toString(),0,shelf.item1,(shelf.item2==Location.Shelves)?0:1);\r\n        //_location=shelf.item2;\r\n        try {\r\n            log.warn(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n            Class c = DALProduct.class;\r\n            List<Tuple<Object, Class>> list = new ArrayList<>();\r\n            list.add(new Tuple<>(storeId, Integer.class));\r\n            list.add(new Tuple<>(typeID, Integer.class));\r\n            list.add(new Tuple<>(id, Integer.class));\r\n            list.add(new Tuple<>(expiration.toString(), String.class));\r\n            list.add(new Tuple<>(0, Integer.class));\r\n            list.add(new Tuple<>(shelf.item1, Integer.class));\r\n            list.add(new Tuple<>((shelf.item2 == Location.Shelves) ? 1 : 0, Integer.class));\r\n            Mapper map=Mapper.getMap();\r\n            map.setItem(c,list);\r\n            List<Integer> keyList = new ArrayList<>();\r\n            keyList.add(storeId);\r\n            keyList.add(id);\r\n            log.warn(\"starting 1st check DALProduct\");\r\n            DALObject check = map.getItem(c, keyList);\r\n            log.warn(\"did 1st check DALProduct\");\r\n            if (check != null) {\r\n                log.warn(\"entry is already in DB, will not attempt insert.\");\r\n                dal = (DALProduct) check;\r\n                return;\r\n            }\r\n            map.setItem(c, list);\r\n            log.warn(\"did insert DALProduct\");\r\n            check = map.getItem(c, keyList);\r\n            if (c == null || check == null || (check.getClass() != c)) {\r\n                String s = \"the instance that return from Mapper is null for: \" + c;\r\n                log.warn(s);\r\n                throw new IllegalArgumentException(s);\r\n\r\n            } else {\r\n                log.info(\"create new Object\");\r\n            }\r\n            dal = (DALProduct) check;\r\n        }catch (Exception e){log.warn(e);}\r\n    }\r\n\r\n    public Product(int storeID, Integer i) {\r\n        List<Integer> list=new ArrayList<>();\r\n        list.add(storeID);\r\n        list.add(i);\r\n        dal=(DALProduct) Mapper.getMap().getItem(DALProduct.class,list);\r\n    }\r\n\r\n    public int get_id() {\r\n        log.debug(\"get_id()\");\r\n        return dal.get_id();\r\n    }\r\n\r\n    public Date get_expiration()\r\n    {\r\n        log.debug(\"get_expiration()\");\r\n        return dal.get_expiration();\r\n    }\r\n\r\n    public boolean is_isDamage() {\r\n        log.debug(\"is_isDamage()\");\r\n        return dal.is_isDamage();\r\n    }\r\n\r\n    public void set_isDamage() {\r\n        log.debug(String.format(\"set_isDamage()\"));\r\n        if (dal.is_isDamage())\r\n        {\r\n            String s=String.format(\"the product #%d , is damage already.\",dal.get_id());\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        try {\r\n            dal.set_isDamage(true);\r\n        }\r\n        catch (Exception e){\r\n            String s=\"can not change the value of damage\";\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n    }\r\n\r\n    public Tuple<Integer, Location> get_location() {\r\n        return new Tuple<>(dal.getShelfNum(),(dal.get_location().item2==\"Shelves\")?Location.Shelves:Location.Storage);\r\n    }\r\n\r\n    public void set_location(Tuple<Integer, Location> location)\r\n    {\r\n        log.debug(String.format(\"set_location(Tuple<Integer, Location> _location)\"));\r\n        checkLocation(location);\r\n        try {\r\n            dal.setLocation(location.item1,location.item2.toString());\r\n        }\r\n        catch (Exception e){\r\n            String s=\"can not change the value of damage\";\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        //_location = location.item2;\r\n    }\r\n    private void checkLocation(Tuple<Integer, Location> location){\r\n        if (location.item1<1){\r\n            String s=String.format(\"the value of shelf (#%d) is illegal\",location.item1);\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n    }\r\n\r\n    public int getShelf() {\r\n        return dal.getShelfNum();\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Product{\" +\r\n                \"_id=\" + dal.get_id() +\r\n                \"_type=\"+ dal.getTypeID()+\r\n                \", _expiration=\" + dal.get_expiration() +\r\n                \", _isDamage=\" + dal.is_isDamage() +\r\n                \", _location=\" + dal.get_location().item1 +\",\"+dal.get_location().item2+\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/BusinessLayer/StockBusiness/instance/Product.java	(revision 98882181de1dde5aafc194b7c244ba5eb8d98b93)
+++ src/BusinessLayer/StockBusiness/instance/Product.java	(date 1620662637472)
@@ -31,7 +31,7 @@
             list.add(new Tuple<>(expiration.toString(), String.class));
             list.add(new Tuple<>(0, Integer.class));
             list.add(new Tuple<>(shelf.item1, Integer.class));
-            list.add(new Tuple<>((shelf.item2 == Location.Shelves) ? 1 : 0, Integer.class));
+            list.add(new Tuple<>((shelf.item2 == Location.Shelves) ? 1 : Location.Shelves , Integer.class));
             Mapper map=Mapper.getMap();
             map.setItem(c,list);
             List<Integer> keyList = new ArrayList<>();
Index: out/production/dev/log4j.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>log4j.rootLogger=warn, file, stdout\r\n\r\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.stdout.Target=System.out\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=[%-5p] %d{dd-MM-yyyy HH:mm:ss} [class: %c,Line:%L] - %m%n\r\n\r\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\r\nlog4j.appender.file.File=logger.log\r\nlog4j.appender.file.MaxFileSize=10MB\r\nlog4j.appender.file.MaxBackupIndex=10\r\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.file.layout.ConversionPattern=[%-5p] %d{dd-MM-yyyy HH:mm:ss} [class: %c,Line:%L] - %m%n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1255
===================================================================
--- out/production/dev/log4j.properties	(revision 98882181de1dde5aafc194b7c244ba5eb8d98b93)
+++ out/production/dev/log4j.properties	(date 1620660638114)
@@ -1,4 +1,4 @@
-log4j.rootLogger=warn, file, stdout
+log4j.rootLogger=error, file, stdout
 
 log4j.appender.stdout=org.apache.log4j.ConsoleAppender
 log4j.appender.stdout.Target=System.out
Index: src/BusinessLayer/StockBusiness/instance/InstanceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BusinessLayer.StockBusiness.instance;\r\n\r\n\r\nimport BusinessLayer.StockBusiness.StoreController;\r\nimport DAL.DalStock.DALInstanceController;\r\nimport Utility.Tuple;\r\nimport Utility.Util;\r\nimport org.apache.log4j.Logger;\r\n\r\nimport java.util.*;\r\n\r\npublic class InstanceController {\r\n    private static int _MAX_PRODUCTS_ON_PROTUCTTYPE= StoreController.getMaxProdOnType();\r\n    private DALInstanceController dal;\r\n    private Dictionary<Integer,Product> _products=new Hashtable<>();\r\n\r\n    final static Logger log=Logger.getLogger(InstanceController.class);\r\n    public InstanceController(){//for testing\r\n       // _typeID=1000;\r\n    }\r\n\r\n    public InstanceController(int storeID,int typeID) {\r\n        dal=Util.initDal(DALInstanceController.class,storeID,typeID,0);\r\n        List<Integer> list=dal.getProducts();\r\n        for (Integer i:list)\r\n            _products.put(i,new Product(storeID,i));\r\n    }\r\n    public InstanceController(int storeID, int typeID,int max){\r\n        _MAX_PRODUCTS_ON_PROTUCTTYPE=max;\r\n        dal=Util.initDal(DALInstanceController.class,storeID,typeID,0);\r\n    }\r\n\r\n    public Product removeProduct(int i) {\r\n        log.debug(String.format(\"removeProduct(int i) Value: \"+i));\r\n        Product p=checkProduct(i);\r\n        try{\r\n            dal.removeProduct(i);\r\n        }\r\n        catch (Exception e){\r\n            String s=String.format(\"can not remove the product\");\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        _products.remove(i);\r\n        log.info(String.format(\"the IC remove Product \"+i));\r\n        return p;\r\n    }\r\n    private Product checkProduct(int i){\r\n        String s;\r\n        if (i<=0)\r\n        {\r\n            s=String.format(\"the value of i is illegal :\"+i);\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        Product p=_products.get(i);\r\n        if (p==null)\r\n        {\r\n            s=String.format(\"does not have a product with #? ID\",i);\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        return p;\r\n    }\r\n\r\n    public void addProduct(Product p) {\r\n        log.debug(\"addProduct(Product p)\");\r\n        String s;\r\n        if (p==null)\r\n        {\r\n            s=String.format(\"the product is null\");\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        if (Collections.list(_products.elements()).contains(p))\r\n        {\r\n            s=\"the product in already exist in the system\";\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n\r\n        try{\r\n            dal.addProduct(p.get_id());\r\n        }\r\n        catch (Exception e){\r\n            String info=String.format(\"can not add the product\");\r\n            log.warn(info);\r\n            throw new IllegalArgumentException(info);\r\n        }\r\n\r\n        _products.put(p.get_id(),p);\r\n        log.info(String.format(\"new item add to IC #?\",dal.get_typeID()));\r\n    }\r\n\r\n    public int addProduct(Date expiration, Location l,int shelf) {\r\n        log.debug(\"addProduct(Date expiration, Location l) Values: \"+expiration+\", \"+l+\", \"+shelf);\r\n        int id=dal.get_typeID()*_MAX_PRODUCTS_ON_PROTUCTTYPE+dal.get_counter();\r\n        try {\r\n            dal.set_counter(dal.get_counter() + 1);\r\n        }\r\n        catch (Exception e){\r\n            String s=\"can not set the counter\";\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        log.warn(\"adding product to dal from instanceController.\");\r\n        Product p=new Product(dal.getStoreID(),dal.get_typeID(),id, expiration, new Tuple<>(shelf,l));\r\n        log.warn(\"done adding product to dal in instanceController.\");\r\n        addProduct(p);\r\n        log.warn(\"done adding product to biz in instanceController.\");\r\n        _products.put(id ,p);\r\n        log.warn(\"done adding product to hash in instanceController.\");\r\n        return id;\r\n    }\r\n    public List<Integer> getProduts(){\r\n        return Collections.list(_products.keys());\r\n    }\r\n\r\n    public Product reportDamage(int i) {\r\n        log.debug(String.format(\"reportDamage(int i) Value:?\",i));\r\n        Product p=checkProduct(i);\r\n        p.set_isDamage();\r\n        return p;\r\n    }\r\n\r\n    public Product getProduct(int i) {\r\n        log.debug(String.format(\"getProduct(int i)\",i));\r\n        return checkProduct(i);\r\n    }\r\n\r\n    public Dictionary<Integer, Tuple<Integer,Boolean>> getWeeklyReport() {\r\n        log.debug(\"getWeeklyReport()\");\r\n        Dictionary<Integer,Tuple<Integer,Boolean>> output=new Hashtable<>();\r\n        List<Integer> ids=Collections.list(_products.keys());\r\n        for(int i:ids){\r\n            output.put(i,new Tuple(_products.get(i).getShelf(),_products.get(i).get_location().equals(Location.Storage)));\r\n        }\r\n        return output;\r\n    }\r\n\r\n    public void getWasteReport(List<Integer> list) {\r\n        log.debug(\"getWasteReport(List<Integer> list)\");\r\n        for(Product p: Collections.list(_products.elements())){\r\n            if(p.is_isDamage()) {\r\n                list.add(p.get_id());\r\n                _products.remove(p.get_id());\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/BusinessLayer/StockBusiness/instance/InstanceController.java	(revision 98882181de1dde5aafc194b7c244ba5eb8d98b93)
+++ src/BusinessLayer/StockBusiness/instance/InstanceController.java	(date 1620662227830)
@@ -87,7 +87,6 @@
             log.warn(info);
             throw new IllegalArgumentException(info);
         }
-
         _products.put(p.get_id(),p);
         log.info(String.format("new item add to IC #?",dal.get_typeID()));
     }
