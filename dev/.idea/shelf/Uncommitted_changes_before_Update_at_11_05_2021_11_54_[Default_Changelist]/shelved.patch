Index: src/BusinessLayer/SupplierBusiness/facade/SupplierService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BusinessLayer.SupplierBusiness.facade;\r\n\r\nimport BusinessLayer.StockBusiness.Fcade.Response;\r\nimport BusinessLayer.StockBusiness.Fcade.ResponseData;\r\nimport BusinessLayer.StockBusiness.Fcade.StorageService;\r\nimport BusinessLayer.StockBusiness.Fcade.outObjects.Report;\r\nimport BusinessLayer.SupplierBusiness.SupplierController;\r\nimport BusinessLayer.SupplierBusiness.ISupplierService;\r\nimport BusinessLayer.SupplierBusiness.facade.outObjects.*;\r\nimport Utility.Tuple;\r\n\r\n\r\nimport java.sql.Date;\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.util.Hashtable;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\npublic class SupplierService implements ISupplierService {\r\n    private SupplierController supplierController;\r\n    private StorageService stockService;\r\n\r\n    public SupplierService() {\r\n        supplierController = null;\r\n    }\r\n\r\n    @Override\r\n    public response LoadData() {\r\n        try {\r\n            supplierController = new SupplierController(true);\r\n        }catch(Exception e){\r\n            supplierController = new SupplierController();\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    public void setStockService(StorageService service){\r\n        stockService=service;\r\n    }\r\n\r\n\r\n    @Override\r\n    public response deleteData() { return new response(); }\r\n\r\n    @Override\r\n    public Tresponse<SupplierCard> showSupplier(int supplierBN) {\r\n        BusinessLayer.SupplierBusiness.SupplierCard supplierCard;\r\n        try {\r\n            supplierCard = supplierController.showSupplier(supplierBN);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if (supplierCard != null)\r\n            return new Tresponse<>(new SupplierCard(supplierCard));\r\n        return new Tresponse<>(\"ERROR: There is no such supplier\");\r\n    }\r\n\r\n    @Override\r\n    public response addSupplier(String supplierName, int bankNumber , int branchNumber, int bankAccount, String payWay) {\r\n        try{\r\n          supplierController.addSupplier(supplierName,bankNumber ,branchNumber , bankAccount, payWay);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeSupplier(int removeSupplier) {\r\n        try{\r\n            supplierController.removeSupplier(removeSupplier);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<SupplierCard> showSupplierBN(String supplierName) {\r\n        BusinessLayer.SupplierBusiness.SupplierCard supplierCard;\r\n        try {\r\n            supplierCard = supplierController.showSupplierBN(supplierName);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if (supplierCard != null) {\r\n            return new Tresponse<>(new SupplierCard(supplierCard));\r\n        }\r\n        return new Tresponse<>(\"ERROR: There is no such supplier\");\r\n    }\r\n\r\n    @Override\r\n    public response updateSupplierPayWay(int supplierBN, String payWay) {\r\n        try{\r\n            supplierController.updateSupplierPayWay(supplierBN, payWay);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateSupplierBankAccount(int supplierBN,int bankNumber , int branchNumber , int bankAccount) {\r\n        try{\r\n            supplierController.updateSupplierBankAccount(supplierBN,bankNumber , branchNumber , bankAccount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response addContactPhone(int supplierBN, String phone, String name) {\r\n        try{\r\n            supplierController.addContactPhone(supplierBN, phone, name);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response addContactEmail(int supplierBN, String Email, String name) {\r\n        try{\r\n            supplierController.addContactEmail(supplierBN, Email, name);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeContactPhone(int supplierBN, String phone) {\r\n        try{\r\n            supplierController.removeContactPhone(supplierBN, phone);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeContactEmail(int supplierBN, String email) {\r\n        try{\r\n            supplierController.removeContactEmail(supplierBN, email);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateContactPhone(int supplierBN, String phone , String name) {\r\n        try{\r\n            supplierController.updateContactPhone(supplierBN, phone , name);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateContactEmail(int supplierBN, String email , String name) {\r\n        try{\r\n            supplierController.updateContactEmail(supplierBN, email , name);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<List<SupplierCard>> showAllSuppliers() {\r\n        List<BusinessLayer.SupplierBusiness.SupplierCard> supplierCards;\r\n        List<SupplierCard> outSupplierCard = new LinkedList<>();\r\n        try {\r\n            supplierCards = supplierController.showAllSuppliers();\r\n            for(BusinessLayer.SupplierBusiness.SupplierCard supplierCard : supplierCards){\r\n                outSupplierCard.add(new SupplierCard(supplierCard));\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if(outSupplierCard.size() == 0) return new Tresponse<>(\"there is no suppliers.\");\r\n        return new Tresponse<>(outSupplierCard);\r\n\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<List<Item>> showAllItemsOfSupplier(int SupplierBN) {\r\n        List<BusinessLayer.SupplierBusiness.Item> items;\r\n        List<Item> outItems = new LinkedList<>();\r\n        try {\r\n            items = supplierController.showAllItemsOfSupplier(SupplierBN);\r\n            for(BusinessLayer.SupplierBusiness.Item item : items){\r\n                outItems.add(new Item(item));\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if(outItems.size() == 0) return new Tresponse<>(\"supplier does not have any items.\");\r\n        return new Tresponse<>(outItems);\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Item> showItemOfSupplier(int SupplierBN, int itemId) {\r\n        BusinessLayer.SupplierBusiness.Item item;\r\n        try{\r\n            item = supplierController.showItemOfSupplier(SupplierBN, itemId);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Item(item));\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<List<Item>> showAllItemsOfOrder(int SupplierBN, int orderId) {\r\n        List<BusinessLayer.SupplierBusiness.Item> items;\r\n        List<Item> outItems = new LinkedList<>();\r\n        try {\r\n            items = supplierController.showAllItemsOfOrder(SupplierBN , orderId);\r\n            for(BusinessLayer.SupplierBusiness.Item item : items){\r\n                outItems.add(new Item(item));\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if(outItems.size() == 0) return new Tresponse<>(\"supplier does not have any orders.\");\r\n        return new Tresponse<>(outItems);\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<List<Item>> showAllItems() {\r\n        List<BusinessLayer.SupplierBusiness.Item> items;\r\n        List<Item> outItems = new LinkedList<>();\r\n        try {\r\n            items = supplierController.showAllItems();\r\n            for(BusinessLayer.SupplierBusiness.Item item : items){\r\n                outItems.add(new Item(item));\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if(outItems.size() == 0) return new Tresponse<>(\"there is np items.\");\r\n        return new Tresponse<>(outItems);\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Item> addItem(int supplierBN, String name , double basePrice , double salePrice , int min , String producer , int category, LocalDate expirationDate) {\r\n        BusinessLayer.SupplierBusiness.Item item;\r\n        try{\r\n            Response response = stockService.addProductType(name, min , basePrice , salePrice , producer , supplierBN ,category);\r\n            if(response.isError) return new Tresponse<>(\"ERROR: \" + response.getError());\r\n            ResponseData<Integer> responseData = stockService.getProductTypeId(name);\r\n            if(responseData.isError) return new Tresponse<>(\"ERROR: \" + responseData.getError());\r\n            item = supplierController.addItem(responseData.data , supplierBN,name , basePrice , expirationDate);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Item(item));\r\n    }\r\n\r\n    @Override\r\n    public response removeItem(int supplierBN , int itemId) {\r\n        try{\r\n            supplierController.removeItem(supplierBN , itemId);\r\n            stockService.removeSupplier(supplierBN , itemId);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeItemFromRegularOrder(int supplierBN, int orderId, int itemId) {\r\n        try{\r\n            supplierController.removeItemFromRegularOrder(supplierBN , orderId , itemId);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeAmountItemFromRegularOrder(int supplierBN, int orderId, int itemId, int amount) {\r\n        try{\r\n            supplierController.removeAmountItemFromRegularOrder(supplierBN , orderId , itemId , amount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Order> addRegularOrder(int supplierBN,int branchID) {\r\n        BusinessLayer.SupplierBusiness.Order order;\r\n        try {\r\n            order = supplierController.addRegularOrder(supplierBN, branchID);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Order(order));\r\n    }\r\n\r\n\r\n    @Override\r\n    public response addConstantOrder(int supplierBN,int branchID , Hashtable<Integer, Integer> items) {\r\n        try {\r\n            supplierController.addConstantOrder(supplierBN, branchID , items);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    public Tresponse<Tuple<List<Integer> , Integer>> getNeededItems(){\r\n        List<Integer> items = new LinkedList<>();\r\n        int branchId = -1;\r\n        try{\r\n            ResponseData<Report> responseData = stockService.getNeededReport();\r\n            if(responseData.isError)  return new Tresponse<>(\"ERROR: \" + responseData.getError());\r\n            Report report = responseData.data;\r\n            //add the itemsId + branchId.\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Tuple<>(items , branchId));\r\n    }\r\n\r\n    public response addNeededOrder(int itemId ,int neededAmount, int branchID) {\r\n        BusinessLayer.SupplierBusiness.Order order;\r\n        try {\r\n            order = supplierController.addNeededOrder(itemId , neededAmount, branchID);\r\n            if (order == null) {\r\n                return new Tresponse<>(\"ERROR: unsuccessful adding\");\r\n            }else{\r\n                ZoneId zone = ZoneId.systemDefault();\r\n                for(int i = 0 ; i < neededAmount ; i++) {\r\n                    stockService.addProduct(order.showAllItemsOfOrder().get(0).getItemId(), Date.from(order.showAllItemsOfOrder().get(0).getExpirationDate().atStartOfDay(zone).toInstant()));\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Order(order));\r\n    }\r\n\r\n    @Override\r\n    public response addItemToOrder(int supplierBN, int orderId, int itemId , int amount) {\r\n        BusinessLayer.SupplierBusiness.Item item;\r\n        try{\r\n            item = supplierController.addItemToOrder(supplierBN, orderId, itemId , amount);\r\n            ZoneId zone = ZoneId.systemDefault();\r\n            for(int i = 0 ; i < amount ; i++) {\r\n                stockService.addProduct(item.getItemId(), Date.from(item.getExpirationDate().atStartOfDay(zone).toInstant()));\r\n            }\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeOrder(int supplierBN, int orderId) {\r\n        try{\r\n            supplierController.removeOrder(supplierBN, orderId);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Order> showOrderOfSupplier(int supplierBN, int orderId) {\r\n        BusinessLayer.SupplierBusiness.Order order;\r\n        try {\r\n            order = supplierController.showOrderOfSupplier(supplierBN, orderId);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Order(order));\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<List<Order>> showAllOrdersOfSupplier(int supplierBN) {\r\n        List<BusinessLayer.SupplierBusiness.Order> orders;\r\n        List<Order> outOrder = new LinkedList<>();\r\n        try {\r\n            orders = supplierController.showAllOrdersOfSupplier(supplierBN);\r\n            for(BusinessLayer.SupplierBusiness.Order order : orders){\r\n                outOrder.add(new Order(order));\r\n            }\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if(outOrder.size() == 0) return new Tresponse<>(\"supplier does not have any orders.\");\r\n        return new Tresponse<>(outOrder);\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Order> showTotalAmount(int supplierBN, int orderId) {\r\n        BusinessLayer.SupplierBusiness.Order order;\r\n        try{\r\n            order = supplierController.showTotalAmount(supplierBN, orderId);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Order(order));\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<Order> showDeliverTime(int supplierBN, int orderId) {\r\n        BusinessLayer.SupplierBusiness.Order order;\r\n        try{\r\n            order = supplierController.showDeliverTime(supplierBN, orderId);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new Order(order));\r\n    }\r\n\r\n    @Override\r\n    public response updateDeliverTime(int supplierBN, int orderId, LocalDate deliverTime){\r\n        try{\r\n            supplierController.updateDeliverTime(supplierBN, orderId, deliverTime);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response addQuantityDocument(int supplierBN, int itemId, int minimalAmount, int discount){\r\n        try{\r\n            supplierController.addQuantityDocument(supplierBN, itemId, minimalAmount,discount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response removeQuantityDocument(int supplierBN, int itemId) {\r\n        try{\r\n            supplierController.removeQuantityDocument(supplierBN , itemId);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<QuantityDocument> showQuantityDocument(int supplierBN, int itemId) {\r\n        BusinessLayer.SupplierBusiness.QuantityDocument quantityDocument;\r\n        try {\r\n            quantityDocument =  supplierController.showQuantityDocument(supplierBN, itemId);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new Tresponse<>(new QuantityDocument(quantityDocument));\r\n    }\r\n\r\n    @Override\r\n    public response updateMinimalAmountOfQD(int supplierBN, int itemId, int minimalAmount) {\r\n        try{\r\n            supplierController.updateMinimalAmountOfQD(supplierBN, itemId, minimalAmount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateDiscountOfQD(int supplierBN, int itemId, int discount) {\r\n        try{\r\n            supplierController.updateDiscountOfQD(supplierBN, itemId, discount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response addSupplierAgreement(int supplierBN, int minimalAmount, int discount, boolean constantTime, boolean shipToUs) {\r\n        try{\r\n            supplierController.addSupplierAgreement(supplierBN, minimalAmount, discount, constantTime, shipToUs);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public Tresponse<SupplierAgreement> showSupplierAgreement(int supplierBN) {\r\n        BusinessLayer.SupplierBusiness.SupplierAgreement supplierAgreement;\r\n        try {\r\n            supplierAgreement = supplierController.showSupplierAgreement(supplierBN);\r\n        }catch (Exception e){\r\n            return new Tresponse<>(\"ERROR: \" + e.getMessage());\r\n        }\r\n        if (supplierAgreement != null) {\r\n            return new Tresponse<>(new SupplierAgreement(supplierAgreement));\r\n        }\r\n        return new Tresponse<>(\"ERROR: There is no such supplier agreement\");\r\n    }\r\n\r\n    @Override\r\n    public response updateMinimalAmountOfSA(int supplierBN, int minimalAmount) {\r\n        try{\r\n            supplierController.updateMinimalAmountOfSA(supplierBN, minimalAmount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateDiscountOfSA(int supplierBN, int discount) {\r\n        try{\r\n            supplierController.updateDiscountOfSA(supplierBN, discount);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateConstantTime(int supplierBN, boolean constantTime) {\r\n        try{\r\n            supplierController.updateConstantTime(supplierBN, constantTime);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updateShipToUs(int supplierBN, boolean ShipToUs) {\r\n        try{\r\n            supplierController.updateShipToUs(supplierBN, ShipToUs);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    @Override\r\n    public response updatePrice(int supplierBN, int itemId, double price) {\r\n        try{\r\n            supplierController.updatePrice(supplierBN , itemId , price);\r\n        }catch (Exception e){\r\n            return new response(\"ERROR: \" + e.getMessage());\r\n        }\r\n        return new response();\r\n    }\r\n\r\n    public void newData() {\r\n        supplierController = new SupplierController();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/BusinessLayer/SupplierBusiness/facade/SupplierService.java	(revision 6e21a634c0816c382d5839573d0c11c12c129bdb)
+++ src/BusinessLayer/SupplierBusiness/facade/SupplierService.java	(date 1620723260105)
@@ -314,18 +314,18 @@
         return new response();
     }
 
-    public Tresponse<Tuple<List<Integer> , Integer>> getNeededItems(){
+    public Tresponse<Report> getNeededItems(){
         List<Integer> items = new LinkedList<>();
+        ResponseData<Report> responseData;
         int branchId = -1;
         try{
-            ResponseData<Report> responseData = stockService.getNeededReport();
+            responseData = stockService.getNeededReport();
             if(responseData.isError)  return new Tresponse<>("ERROR: " + responseData.getError());
             Report report = responseData.data;
-            //add the itemsId + branchId.
         }catch (Exception e){
             return new Tresponse<>("ERROR: " + e.getMessage());
         }
-        return new Tresponse<>(new Tuple<>(items , branchId));
+        return new Tresponse<>(responseData);
     }
 
     public response addNeededOrder(int itemId ,int neededAmount, int branchID) {
Index: src/Presentation/PresentationCL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Presentation;\r\n\r\nimport BusinessLayer.StockBusiness.Fcade.StorageService;\r\nimport BusinessLayer.SupplierBusiness.facade.SupplierService;\r\nimport BusinessLayer.SupplierBusiness.facade.Tresponse;\r\nimport BusinessLayer.SupplierBusiness.facade.outObjects.*;\r\nimport BusinessLayer.SupplierBusiness.facade.response;\r\nimport Utility.Tuple;\r\nimport org.apache.log4j.Logger;\r\n\r\nimport java.io.InputStreamReader;\r\nimport java.time.LocalDate;\r\nimport java.util.Hashtable;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class PresentationCL {\r\n\r\n    private final SupplierService service;\r\n    final static Logger log = Logger.getLogger(PresentationCL.class);\r\n\r\n    public PresentationCL() {\r\n        service = new SupplierService();\r\n    }\r\n\r\n    public void loadData() {\r\n        try {\r\n            service.LoadData();\r\n        } catch (Exception e) {\r\n            System.out.println(\"there is no data here\");\r\n        }\r\n    }\r\n\r\n    public SupplierService getService() {\r\n        return service;\r\n    }\r\n\r\n    public void setStockService(StorageService service) {\r\n        this.service.setStockService(service);\r\n    }\r\n\r\n    public void newData() {\r\n        service.newData();\r\n    }\r\n\r\n    public void mainRun(boolean firstTime) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        String[] mainMenuArray = {\"showing methods\", \"adding methods\", \"removing methods\", \"updating methods\", \"back to choice menu\", \"END PROGRAM\"};\r\n        int option = -1;\r\n        while (true) {\r\n            System.out.println(\"please select an option: \");\r\n            for (int i = 1; i <= mainMenuArray.length; i++) {\r\n                System.out.println(i + \") \" + mainMenuArray[i - 1]);\r\n            }\r\n            option = menuCheck(scanner);\r\n            switch (option) {\r\n                case 1 -> {\r\n                    showingMethods();\r\n                    break;\r\n                }\r\n                case 2 -> {\r\n                    addingMethods();\r\n                    break;\r\n                }\r\n                case 3 -> {\r\n                    removingMethods();\r\n                    break;\r\n                }\r\n                case 4 -> {\r\n                    updatingMethods();\r\n                    break;\r\n                }\r\n                case 5 -> {\r\n                    return;\r\n                }\r\n                case 6 -> {\r\n                    System.exit(0);\r\n                }\r\n                default -> System.out.println(\"illegal option!!!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showingMethods() {\r\n        Scanner scanner = new Scanner(new InputStreamReader(System.in));\r\n        int option = -1;\r\n        String[] showingMethodArray = {\"show Supplier\", \"show SupplierBN\", \"show All Suppliers\", \"show Item Of Supplier\", \"show All Items Of Supplier\",\r\n                \"show All Items\", \"show Order Of Supplier\", \"show All Orders Of Supplier\", \"show Total Amount\",\r\n                \"show Deliver Time\", \"show Quantity Document\", \"show Supplier Agreement\", \"back to the main menu\", \"END PROGRAM\"};\r\n        System.out.println(\"please select the showing method: \");\r\n        while (true) {\r\n            for (int i = 1; i <= showingMethodArray.length; i++) {\r\n                System.out.println(i + \") \" + showingMethodArray[i - 1]);\r\n            }\r\n            option = menuCheck(scanner);\r\n            int BN;\r\n            switch (option) {\r\n                case 1 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    Tresponse<SupplierCard> response = service.showSupplier(BN);\r\n                    if (response.isError()) System.out.println(response.getError());\r\n                    else {\r\n                        System.out.println(response.getOutObject().toString());\r\n                        Tresponse<List<Item>> items = service.showAllItemsOfSupplier(BN);\r\n                        if (items.isError()) System.out.println(items.getError() + \"\\n\");\r\n                        else {\r\n                            List<Item> responsesItem = items.getOutObject();\r\n                            System.out.println(\"\\tItemsID:\");\r\n                            for (Item item : responsesItem) {\r\n                                System.out.println(\"\\t\\t\" + item.toStringId());\r\n                            }\r\n                            Tresponse<List<Order>> orders = service.showAllOrdersOfSupplier(BN);\r\n                            if (orders.isError()) System.out.println(items.getError() + \"\\n\");\r\n                            else {\r\n                                List<Order> responsesOrders = orders.getOutObject();\r\n                                System.out.println(\"\\tOrdersId:\");\r\n                                for (Order order : responsesOrders) {\r\n                                    System.out.println(\"\\t\\t\" + order.toStringId());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 2 -> {\r\n                    String name = stringScan(scanner, \"please enter supplier name\");\r\n                    Tresponse<SupplierCard> response = service.showSupplierBN(name);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"supplierBN is: \" + response.getOutObject().toStringId());\r\n                    toContinue(scanner);\r\n                }\r\n                case 3 -> {\r\n                    Tresponse<List<SupplierCard>> responsesList = service.showAllSuppliers();\r\n                    if (responsesList.isError()) System.out.println(responsesList.getError() + \"\\n\");\r\n                    else {\r\n                        List<SupplierCard> responses = responsesList.getOutObject();\r\n                        for (SupplierCard supplierCard : responses) {\r\n                            System.out.println(supplierCard.toString());\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 4 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    Tresponse<Item> response = service.showItemOfSupplier(BN, itemId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(response.getOutObject().toString(false));\r\n                    toContinue(scanner);\r\n                }\r\n                case 5 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    Tresponse<List<Item>> responsesList = service.showAllItemsOfSupplier(BN);\r\n                    if (responsesList.isError()) System.out.println(responsesList.getError() + \"\\n\");\r\n                    else {\r\n                        List<Item> responses = responsesList.getOutObject();\r\n                        for (Item item : responses) {\r\n                            System.out.println(item.toString(false));\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 6 -> {\r\n                    Tresponse<List<Item>> responsesList = service.showAllItems();\r\n                    if (responsesList.isError()) System.out.println(responsesList.getError() + \"\\n\");\r\n                    else {\r\n                        List<Item> responses = responsesList.getOutObject();\r\n                        for (Item item : responses) {\r\n                            System.out.println(item.toString(false));\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 7 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    service.showTotalAmount(BN, orderId);\r\n                    Tresponse<Order> response = service.showOrderOfSupplier(BN, orderId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else {\r\n                        System.out.println(response.getOutObject().toString());\r\n                        Tresponse<SupplierAgreement> supplierAgreement = service.showSupplierAgreement(BN);\r\n                        if (supplierAgreement.isError()) System.out.println(supplierAgreement.getError() + \"\\n\");\r\n                        else {\r\n                            System.out.println(\"\\tship to us: \" + supplierAgreement.getOutObject().toStringShipToUs());\r\n                            //System.out.println(\"\\tconstant time: \" + supplierAgreement.getOutObject().toStringConstantTime());\r\n                        }\r\n                        Tresponse<List<Item>> items = service.showAllItemsOfOrder(BN, orderId);\r\n                        if (items.isError()) System.out.println(items.getError() + \"\\n\");\r\n                        else {\r\n                            List<Item> responseItem = items.getOutObject();\r\n                            for (Item item : responseItem) {\r\n                                System.out.println(item.toString(response.getOutObject().toStringAmount(item.toStringId())));\r\n                            }\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 8 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    Tresponse<List<Order>> responsesList = service.showAllOrdersOfSupplier(BN);\r\n                    if (responsesList.isError()) System.out.println(responsesList.getError() + \"\\n\");\r\n                    else {\r\n                        List<Order> responses = responsesList.getOutObject();\r\n                        for (Order order : responses) {\r\n                            System.out.println(order.toString());\r\n                            Tresponse<List<Item>> items = service.showAllItemsOfOrder(BN, Integer.parseInt(order.toStringId()));\r\n                            if (items.isError()) System.out.println(items.getError() + \"\\n\");\r\n                            else {\r\n                                Tresponse<SupplierAgreement> supplierAgreement = service.showSupplierAgreement(BN);\r\n                                if (supplierAgreement.isError())\r\n                                    System.out.println(supplierAgreement.getError() + \"\\n\");\r\n                                else {\r\n                                    System.out.println(\"\\tship to us: \" + supplierAgreement.getOutObject().toStringShipToUs());\r\n                                    //System.out.println(\"\\tconstant time: \" + supplierAgreement.getOutObject().toStringConstantTime());\r\n                                }\r\n                                List<Item> responseItem = items.getOutObject();\r\n                                for (Item item : responseItem) {\r\n                                    System.out.println(item.toString(order.toStringAmount(item.toStringId())));\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    toContinue(scanner);\r\n                }\r\n                case 9 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    Tresponse<Order> response = service.showTotalAmount(BN, orderId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"total amount is: \" + response.getOutObject().toStringTotalAmount());\r\n                    toContinue(scanner);\r\n                }\r\n                case 10 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    Tresponse<Order> response = service.showDeliverTime(BN, orderId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"deliver time is : \" + response.getOutObject().toStringDeliverTime());\r\n                    toContinue(scanner);\r\n                }\r\n                case 11 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    Tresponse<QuantityDocument> response = service.showQuantityDocument(BN, itemId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(response.getOutObject().toString());\r\n                    toContinue(scanner);\r\n                }\r\n                case 12 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    Tresponse<SupplierAgreement> response = service.showSupplierAgreement(BN);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(response.getOutObject().toString());\r\n                    toContinue(scanner);\r\n                }\r\n                case 13 -> {\r\n                    return;\r\n                }\r\n                case 14 -> {\r\n                    System.exit(0);\r\n                }\r\n                default -> {\r\n                    System.out.println(\"illegal option!!!\");\r\n                    toContinue(scanner);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addingMethods() {\r\n        Scanner scanner = new Scanner(new InputStreamReader(System.in));\r\n        int option = -1;\r\n        String[] showingMethodArray = {\"add supplier\", \"add Contact Phone\", \"add Contact Email\", \"add Item\", \"add constant Order\",\r\n                \"add Regular Order\", \"add needed report\", \"add Item To Order\", \"add Quantity Document\",\r\n                \"add Supplier Agreement\", \"back to the main menu\", \"END PROGRAM\"};\r\n        System.out.println(\"please select the showing method: \");\r\n        while (true) {\r\n            for (int i = 1; i <= showingMethodArray.length; i++) {\r\n                System.out.println(i + \") \" + showingMethodArray[i - 1]);\r\n            }\r\n            option = menuCheck(scanner);\r\n            int BN;\r\n            switch (option) {\r\n                case 1 -> {\r\n                    String name = stringScan(scanner, \"please enter supplier name\");\r\n                    int bankNumber = intScan(scanner, \"please enter supplier bank number\", \"bank number must be a number\");\r\n                    int branchNumber = intScan(scanner, \"please enter supplier branch number\", \"branch number must be a number\");\r\n                    int bankAccount = intScan(scanner, \"please enter supplier bank account\", \"bank account must be a number\");\r\n                    String payWay = stringScan(scanner, \"please enter supplier payWay\");\r\n                    response response = service.addSupplier(name, bankNumber, branchNumber, bankAccount, payWay);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 2 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String phone = stringScan(scanner, \"please enter supplier contact phone\");\r\n                    String name = stringScan(scanner, \"please enter supplier contact name\");\r\n                    response response = service.addContactPhone(BN, phone, name);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 3 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String email = stringScan(scanner, \"please enter supplier contact email\");\r\n                    String name = stringScan(scanner, \"please enter supplier contact name\");\r\n                    response response = service.addContactEmail(BN, email, name);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 4 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String name = stringScan(scanner, \"please enter item name\");\r\n                    double basePrice = doubleScan(scanner, \"please enter item base price\", \"base price must be a number\");\r\n                    double salePrice = doubleScan(scanner, \"please enter item sale price\", \"sale price must be a number\");\r\n                    int min = intScan(scanner, \"please enter minimal amount of item before report of missing\", \"minimal amount must must be a number\");\r\n                    String preducer = stringScan(scanner, \"please enter the name of the item preducer\");\r\n                    int category = intScan(scanner, \"please enter item category\", \"category must must be a number\");\r\n                    LocalDate expirationDate = dateScan(scanner, \"expiration date of the item\");\r\n                    Tresponse<Item> response = service.addItem(BN, name, basePrice, salePrice, min, preducer, category, expirationDate);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"ItemId is: \" + response.getOutObject().toStringId() + \"\\n\");\r\n                    toContinue(scanner);\r\n                }\r\n                case 5 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int branchID = intScan(scanner, \"please enter branchId for deliver\", \"branchId must be a number\");\r\n                    Hashtable<Integer, Integer> items = hashScan(scanner);\r\n                    response response = service.addConstantOrder(BN, branchID, items);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"constant Order added successfully\");\r\n                    toContinue(scanner);\r\n                }\r\n                case 6 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int branchID = intScan(scanner, \"please enter branchId for deliver\", \"branchId must be a number\");\r\n                    Tresponse<Order> response = service.addRegularOrder(BN, branchID);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"orderId is: \" + response.getOutObject().toStringId() + \"\\n\");\r\n                    toContinue(scanner);\r\n                }\r\n                case 50 -> {\r\n                    Tresponse<Tuple<List<Integer>, Integer>> tresponse = service.getNeededItems();\r\n                    if (tresponse.isError()) System.out.println(tresponse.getError() + \"\\n\");\r\n                    else {\r\n                        for (Integer i : tresponse.getOutObject().item1) {\r\n                            String ans = stringScan(scanner, \"pres yes to order the item: \" + i);\r\n                            if (ans.equals(\"yes\")) {\r\n                                int amount = intScan(scanner, \"please enter amount of the item\", \"amount must be a number\");\r\n                                response response = service.addNeededOrder(i, amount, tresponse.getOutObject().item2);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                case 7 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    int amount = intScan(scanner, \"please enter amount of the item\", \"amount must be a number\");\r\n                    response response = service.addItemToOrder(BN, orderId, itemId, amount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 8 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    int minimalAmount = intScan(scanner, \"please enter the minimal amount\", \"minimal amount must be a number\");\r\n                    int discount = intScan(scanner, \"please enter the discount\", \"discount must be a number\");\r\n                    response response = service.addQuantityDocument(BN, itemId, minimalAmount, discount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 9 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int minimalAmount = intScan(scanner, \"please enter the minimal amount\", \"minimal amount must be a number\");\r\n                    int discount = intScan(scanner, \"please enter the discount\", \"discount must be a number\");\r\n                    boolean constantTime = booleanScan(scanner, \"please enter true for constant time , and false otherwise\", \"you must enter true/false\");\r\n                    boolean shipToUs = booleanScan(scanner, \"please enter true for ship to us , and false otherwise\", \"you must enter true/false\");\r\n                    response response = service.addSupplierAgreement(BN, minimalAmount, discount, constantTime, shipToUs);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 10 -> {\r\n                    return;\r\n                }\r\n                case 11 -> {\r\n                    System.exit(0);\r\n                }\r\n                default -> {\r\n                    System.out.println(\"illegal option!!!\\n\");\r\n                    toContinue(scanner);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void removingMethods() {\r\n        Scanner scanner = new Scanner(new InputStreamReader(System.in));\r\n        int option = -1;\r\n        String[] removeMethodArray = {\"remove Supplier\", \"remove Contact Phone\", \"remove Contact Email\", \"remove Item\", \"remove Order\",\r\n                \"remove item from regular order\", \"remove amount of items from regular order\",\r\n                \"remove Quantity Document\", \"back to the main menu\", \"END PROGRAM\"};\r\n        System.out.println(\"please select the showing method: \");\r\n        while (true) {\r\n            for (int i = 1; i <= removeMethodArray.length; i++) {\r\n                System.out.println(i + \") \" + removeMethodArray[i - 1]);\r\n            }\r\n            option = menuCheck(scanner);\r\n            int BN;\r\n            switch (option) {\r\n                case 1 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    response response = service.removeSupplier(BN);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 2 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String phone = stringScan(scanner, \"please enter supplier contact phone\");\r\n                    response response = service.removeContactPhone(BN, phone);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 3 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String email = stringScan(scanner, \"please enter supplier contact email\");\r\n                    response response = service.removeContactEmail(BN, email);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 4 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    response response = service.removeItem(BN, itemId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 5 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    response response = service.removeOrder(BN, orderId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 6 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    response response = service.removeItemFromRegularOrder(BN, orderId, itemId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 7 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    int amount = intScan(scanner, \"please enter the amount of the item\", \"amount must be a number\");\r\n                    response response = service.removeAmountItemFromRegularOrder(BN, orderId, itemId, amount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 8 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    response response = service.removeQuantityDocument(BN, itemId);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 9 -> {\r\n                    return;\r\n                }\r\n                case 10 -> {\r\n                    System.exit(0);\r\n                }\r\n                default -> {\r\n                    System.out.println(\"illegal option!!!\");\r\n                    toContinue(scanner);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updatingMethods() {\r\n        Scanner scanner = new Scanner(new InputStreamReader(System.in));\r\n        int option = -1;\r\n        int BN;\r\n        String[] updateMethodArray = {\"update Supplier PayWay\", \"update Supplier BankAccount\", \"update Contact Phone\", \"update Contact Email\",\r\n                \"update Deliver Time\", \"update Minimal Amount Of Quantity Document\", \"update Discount Of Quantity Document\",\r\n                \"update Minimal Amount Of Supplier Agreement\", \"update Discount Of Supplier Agreement\",\r\n                \"update Constant Time\", \"update Ship To Us\", \"update Price\", \"back to the main menu\", \"END PROGRAM\"};\r\n        System.out.println(\"please select the showing method: \");\r\n        while (true) {\r\n            for (int i = 1; i <= updateMethodArray.length; i++) {\r\n                System.out.println(i + \") \" + updateMethodArray[i - 1]);\r\n            }\r\n            option = menuCheck(scanner);\r\n            switch (option) {\r\n                case 1 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String payWay = stringScan(scanner, \"please enter supplier payWay\");\r\n                    response response = service.updateSupplierPayWay(BN, payWay);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 2 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int bankNumber = intScan(scanner, \"please enter supplier bank number\", \"bank number must be a number\");\r\n                    int branchNumber = intScan(scanner, \"please enter supplier branch number\", \"branch number must be a number\");\r\n                    int bankAccount = intScan(scanner, \"please enter supplier bank account\", \"bank account must be a number\");\r\n                    response response = service.updateSupplierBankAccount(BN, bankNumber, branchNumber, bankAccount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 3 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String phone = stringScan(scanner, \"please enter supplier contact phone\");\r\n                    String name = stringScan(scanner, \"please enter supplier contact name\");\r\n                    response response = service.updateContactPhone(BN, phone, name);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 4 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    String email = stringScan(scanner, \"please enter supplier contact email\");\r\n                    String name = stringScan(scanner, \"please enter supplier contact name\");\r\n                    response response = service.updateContactEmail(BN, email, name);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 5 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int orderId = intScan(scanner, \"please enter orderId\", \"orderId must be a number\");\r\n                    LocalDate date = dateScan(scanner, \"deliver time of the order\");\r\n                    response response = service.updateDeliverTime(BN, orderId, date);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 6 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    int minimalAmount = intScan(scanner, \"please enter the minimal amount\", \"minimal amount must be a number\");\r\n                    response response = service.updateMinimalAmountOfQD(BN, itemId, minimalAmount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 7 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    int discount = intScan(scanner, \"please enter the discount\", \"discount must be a number\");\r\n                    response response = service.updateDiscountOfQD(BN, itemId, discount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 8 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int minimalAmount = intScan(scanner, \"please enter the minimal amount\", \"minimal amount must be a number\");\r\n                    response response = service.updateMinimalAmountOfSA(BN, minimalAmount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 9 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int discount = intScan(scanner, \"please enter the discount\", \"discount must be a number\");\r\n                    response response = service.updateDiscountOfSA(BN, discount);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 10 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    boolean constantTime = booleanScan(scanner, \"please enter true for constant time and false otherwise\", \"you must enter true/false\");\r\n                    response response = service.updateConstantTime(BN, constantTime);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 11 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    boolean shipToUs = booleanScan(scanner, \"please enter true for ship to us , and false otherwise\", \"you must enter true/false\");\r\n                    response response = service.updateShipToUs(BN, shipToUs);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 12 -> {\r\n                    BN = intScan(scanner, \"please enter supplier BN\", \"BN must be a number\");\r\n                    int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n                    double price = doubleScan(scanner, \"please enter item price\", \"price must be a number\");\r\n                    response response = service.updatePrice(BN, itemId, price);\r\n                    if (response.isError()) System.out.println(response.getError() + \"\\n\");\r\n                    else System.out.println(\"The operation was completed successfully\\n\");\r\n                }\r\n                case 13 -> {\r\n                    return;\r\n                }\r\n                case 14 -> {\r\n                    System.exit(0);\r\n                }\r\n                default -> {\r\n                    System.out.println(\"illegal option!!!\");\r\n                    toContinue(scanner);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private String read(Scanner scanner) {\r\n        return scanner.nextLine().toLowerCase().replaceAll(\"\\\\s\", \"\");\r\n    }\r\n\r\n    private int intScan(Scanner scanner, String before, String after) {\r\n        int toReturn;\r\n        String answer;\r\n        while (true) {\r\n            System.out.println(before);\r\n            try {\r\n                answer = read(scanner);\r\n                toReturn = Integer.parseInt(answer);\r\n                break;\r\n            } catch (Exception e) {\r\n                System.out.println(after);\r\n\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    private String stringScan(Scanner scanner, String before) {\r\n        System.out.println(before);\r\n        return read(scanner);\r\n    }\r\n\r\n    private boolean booleanScan(Scanner scanner, String before, String after) {\r\n        boolean toReturn;\r\n        String answer;\r\n        while (true) {\r\n            System.out.println(before);\r\n            try {\r\n                answer = read(scanner);\r\n                if (answer.equals(\"true\")) toReturn = true;\r\n                else if (answer.equals(\"false\")) toReturn = false;\r\n                else throw new IllegalAccessException(\"not boolean\");\r\n                break;\r\n            } catch (Exception e) {\r\n                System.out.println(after);\r\n\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n\r\n    private double doubleScan(Scanner scanner, String before, String after) {\r\n        double toReturn;\r\n        String answer;\r\n        while (true) {\r\n            System.out.println(before);\r\n            try {\r\n                answer = read(scanner);\r\n                toReturn = Double.parseDouble(answer);\r\n                break;\r\n            } catch (Exception e) {\r\n                System.out.println(after);\r\n\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    private LocalDate dateScan(Scanner scanner, String rest) {\r\n        LocalDate toReturn;\r\n        while (true) {\r\n            try {\r\n                int year = intScan(scanner, \"please enter the year of the \" + rest, \"year must be a number\");\r\n                int month = intScan(scanner, \"please enter the month of the \" + rest, \"month must be a number\");\r\n                int day = intScan(scanner, \"please enter the day of the \" + rest, \"day must be a number\");\r\n                toReturn = LocalDate.of(year, month, day);\r\n                break;\r\n            } catch (Exception e) {\r\n                System.out.println(\"illegal values of dates\");\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    private Hashtable<Integer, Integer> hashScan(Scanner scanner) {\r\n        Hashtable<Integer, Integer> items = new Hashtable<>();\r\n        while (true) {\r\n            int itemId = intScan(scanner, \"please enter itemId\", \"itemId must be a number\");\r\n            int amount = intScan(scanner, \"please enter the amount of the item\", \"amount must be a number\");\r\n            items.put(itemId, amount);\r\n            String toStop = stringScan(scanner, \"to put more items please type more\");\r\n            if (!toStop.equals(\"more\")) break;\r\n        }\r\n        return items;\r\n    }\r\n\r\n    private void toContinue(Scanner scanner) {\r\n        while (true) {\r\n            System.out.println(\"\\nto continue please use enter\");\r\n            String isEnter = read(scanner);\r\n            if (isEnter.equals(\"\")) break;\r\n        }\r\n    }\r\n\r\n    private int menuCheck(Scanner scanner) {\r\n        String choice;\r\n        int toReturn;\r\n        while (true) {\r\n            try {\r\n                choice = read(scanner);\r\n                toReturn = Integer.parseInt(choice);\r\n                break;\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"illegal!\\n please enter a number\");\r\n                scanner.nextLine();\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Presentation/PresentationCL.java	(revision 6e21a634c0816c382d5839573d0c11c12c129bdb)
+++ src/Presentation/PresentationCL.java	(date 1620723260128)
@@ -1,6 +1,7 @@
 package Presentation;
 
 import BusinessLayer.StockBusiness.Fcade.StorageService;
+import BusinessLayer.StockBusiness.Fcade.outObjects.Report;
 import BusinessLayer.SupplierBusiness.facade.SupplierService;
 import BusinessLayer.SupplierBusiness.facade.Tresponse;
 import BusinessLayer.SupplierBusiness.facade.outObjects.*;
@@ -341,13 +342,12 @@
                     toContinue(scanner);
                 }
                 case 50 -> {
-                    Tresponse<Tuple<List<Integer>, Integer>> tresponse = service.getNeededItems();
+                    Tresponse<Report> tresponse = service.getNeededItems();
                     if (tresponse.isError()) System.out.println(tresponse.getError() + "\n");
                     else {
                         for (Integer i : tresponse.getOutObject().item1) {
                             String ans = stringScan(scanner, "pres yes to order the item: " + i);
                             if (ans.equals("yes")) {
-                                int amount = intScan(scanner, "please enter amount of the item", "amount must be a number");
                                 response response = service.addNeededOrder(i, amount, tresponse.getOutObject().item2);
                             }
                         }
