Index: src/DAL/DalStock/DALCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DAL.DalStock;\r\n\r\nimport DAL.DALObject;\r\nimport DAL.DalController;\r\nimport DAL.Mapper;\r\nimport Utility.Tuple;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class DALCategory extends DALObject {\r\n\r\n    private int _categoryID;\r\n    private String _name;\r\n    private List<Integer> _productTypes= new ArrayList<>();\r\n    private List<Integer> _productDiscounts=new ArrayList<>();\r\n    private int _storeID;\r\n    private int _superCategory=0;\r\n    private List<Integer> _categories=new ArrayList<>();\r\n\r\n\r\n\r\n    public DALCategory(){\r\n        super(null);\r\n    }\r\n\r\n    public DALCategory(Integer storeID, Integer id, Integer parentID, String name, DalController dc){\r\n        super(dc);\r\n        _storeID=storeID;\r\n        _categoryID=id;\r\n        _superCategory=(parentID==null)?0:parentID;\r\n        _name=name;\r\n    } // get child categories types and discounts from controller\r\n\r\n    @Override\r\n    public String getCreate() {\r\n        return \"CREATE TABLE IF NOT EXISTS Category (\\n\" +\r\n                \"\\tstoreID INTEGER NOT NULL,\\n\" +\r\n                \"\\tcategoryID INTEGER NOT NULL,\\n\" +\r\n                \"\\tparentID INTEGER,\"+\r\n                \"\\tname VARCHAR NOT NULL,\\n\" +\r\n                \"\\tPRIMARY KEY (storeID, categoryID),\\n\" +\r\n                \"\\tUNIQUE (storeID, categoryID),\\n\" +\r\n                \"\\tFOREIGN KEY (storeID) REFERENCES StoreController(storeID)\\n\" +\r\n                \"\\tON DELETE CASCADE ON UPDATE CASCADE\\t\\n\" +\r\n                \");\\n\" +\r\n                \"\\n\" +\r\n                \"CREATE TABLE IF NOT EXISTS SubCategory (\\n\" +\r\n                \"\\tstoreID INTEGER NOT NULL UNIQUE,\\n\" +\r\n                \"\\tparentID INTEGER NOT NULL UNIQUE,\\n\" +\r\n                \"\\tchildID INTEGER NOT NULL,\\n\" +\r\n                \"\\tPRIMARY KEY (storeID, childID),\\n\" +\r\n                \"\\tUNIQUE (storeID, childID),\\n\" +\r\n                \"\\tFOREIGN KEY (storeID) REFERENCES StoreController(storeID)\\n\" +\r\n                \"\\tON DELETE CASCADE ON UPDATE CASCADE,\\n\" +\r\n                \"\\tFOREIGN KEY (storeID,parentID) REFERENCES Category (storeID,categoryID)\\n\" +\r\n                \"\\tON DELETE CASCADE ON UPDATE CASCADE,\\n\" +\r\n                \"\\tFOREIGN KEY (storeID,childID) REFERENCES Category (storeID,categoryID)\\n\" +\r\n                \"\\tON DELETE CASCADE ON UPDATE CASCADE\\n\" +\r\n                \");\";\r\n    }\r\n    public void init(){\r\n        String query= \"\"\"\r\n                SELECT typeID \\s\r\n                FROM Product \\s\r\n                WHERE StoreID=? AND categoryId=?; \r\n                \"\"\";\r\n        _productTypes=fill(query,_storeID,_categoryID);\r\n         query= \"\"\"\r\n                SELECT discountID \\s\r\n                FROM Discount \\s\r\n                WHERE StoreID=? AND categoryId=?; \r\n                \"\"\";\r\n        _productDiscounts=fill(query,_storeID,_categoryID);\r\n        query= \"\"\"\r\n                SELECT categoryId \\s\r\n                FROM Category \\s\r\n                WHERE StoreID=? AND categoryId=?; \r\n                \"\"\";\r\n        _categories=fill(query,_storeID,_categoryID);\r\n    }\r\n    private List<Integer> fill(String query,Integer... i){\r\n        List<Integer> list=new ArrayList<>();\r\n        Collections.addAll(list, i);\r\n        try {\r\n            List<Tuple<List<Class>,List<Object>>> tmp= DC.SelectMany(query,list);\r\n            for (Tuple<List<Class>,List<Object>> t: tmp){\r\n                return tmp.stream().map(x->(int)x.item2.get(0)).collect(Collectors.toList());\r\n            }\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(\"fail\");\r\n        }\r\n        throw new IllegalArgumentException(\"fail\");\r\n    }\r\n\r\n    @Override\r\n    public String getSelect() {\r\n        return \"\"\"\r\n                SELECT * \\s\r\n                FROM Category \\s\r\n                WHERE storeId=? AND categoryID=?; \\s\r\n                \"\"\";\r\n    }\r\n\r\n    @Override\r\n    public String getDelete() {\r\n        return \"\"\"\r\n                DELETE FROM Category \\s\r\n                WHERE storeID=? AND categoryID=?;\\s\r\n                DELETE FROM Category \\s\r\n                WHERE storeID=? AND categoryID=?;\\s\r\n                \"\"\";\r\n    }\r\n\r\n    @Override\r\n    public String getUpdate() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public String getInsert() {\r\n        return \"\"\"\r\n                INSERT INTO Category \\s\r\n                VALUES (?,?,?,?)\r\n                \"\"\";\r\n    }\r\n\r\n\r\n    public int getCategoryID() {\r\n        return _categoryID;\r\n    }\r\n    public String getName() {\r\n        return _name;\r\n    }\r\n    public void setName(String name){\r\n        String updateName=\"UPDATE Category \\n\" +\r\n                \"SET name=?\\n\" +\r\n                \"WHERE \\n\" +\r\n                \"storeID=?\\n\" +\r\n                \"AND categoryID=?;\";\r\n        List<Tuple<Object,Class>> list=prepareList(name,_storeID,_categoryID);\r\n        try {\r\n            DC.noSelect(updateName, list);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(\"fail\");\r\n        }\r\n        _name=name;\r\n    }\r\n    public List<Integer> getProductTypes(){return _productTypes;}\r\n    public List<Integer> getDiscounts(){return _productDiscounts;}\r\n    public void setSuperCategory(int i){\r\n        String updateParent=\"UPDATE Category\\n\" +\r\n                \"SET parentID=?\\n\" +\r\n                \"WHERE storeID=?\\n\" +\r\n                \"AND categoryID=?;\";\r\n        List<Tuple<Object,Class>> list=prepareList(i,_storeID,_categoryID);\r\n        try {\r\n            DC.noSelect(updateParent, list);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(\"fail\");\r\n        }\r\n        _superCategory=i;\r\n    }\r\n\r\n\r\n    public void addCategory(int i){\r\n        String query=\"INSERT INTO SubCategory \\n\" +\r\n                \"(storeID,parentID,childID) \\n\" +\r\n                \"VALUES (?,?,?) ;\";\r\n        List<Tuple<Object,Class>> params=prepareList(_storeID,_categoryID,i);\r\n        try {\r\n            DC.noSelect(query,params);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(\"fail\");\r\n        }\r\n        _categories.add(i);\r\n    }\r\n    private List<Tuple<Object,Class>> prepareList(Object... o){\r\n        List<Tuple<Object,Class>> params=new ArrayList<>();\r\n        for (Object o1:o){\r\n            params.add(new Tuple<>(o1,o1.getClass()));\r\n        }\r\n        return params;\r\n    }\r\n\r\n    public void addProductType(int i){\r\n        List<Integer> key=new ArrayList<>();\r\n        key.add(_storeID);\r\n        key.add(i);\r\n        DALProductType pt=(DALProductType) Mapper.getMap().getItem(DALProductType.class,key);\r\n        pt.setCategory(_categoryID);\r\n        _productTypes.add(i);\r\n    }\r\n    public void setDiscounts(List<Integer> list){\r\n        List<Integer> key;\r\n        List<Integer> remove=_productDiscounts;\r\n        for (Integer i:remove){\r\n            removeDiscount(i);\r\n        }\r\n        for (Integer i:list){\r\n            addDiscount(i);\r\n        }\r\n    }\r\n    public void addDiscount(int i){\r\n        List<Integer> key=new ArrayList<>();\r\n        key.add(_storeID);\r\n        key.add(i);\r\n        DALSaleDiscount pt=(DALSaleDiscount) Mapper.getMap().getItem(DALSaleDiscount.class,key);\r\n        pt.addCategory(_categoryID);\r\n        _productDiscounts.add(i);\r\n    }\r\n    public void removeDiscount(int i){\r\n        List<Integer>key=new ArrayList<>();\r\n        key.add(_storeID);\r\n        key.add(i);\r\n        DALSaleDiscount pt=(DALSaleDiscount) Mapper.getMap().getItem(DALSaleDiscount.class,key);\r\n        pt.removeCategory(_categoryID);\r\n        _productDiscounts.remove(i);\r\n    }\r\n    public void removeCategory(int i){\r\n        String query=\"DELETE SubCategory \\n\" +\r\n                \"WHERE storeID=? AND parentID=? AND childID=? ;\\n\";\r\n        List<Tuple<Object,Class>> params=prepareList(_storeID,_categoryID,i);\r\n        try {\r\n            DC.noSelect(query,params);\r\n        }\r\n        catch (Exception e){\r\n            throw new IllegalArgumentException(\"fail\");\r\n        }\r\n        _categories.remove(i);\r\n    }\r\n    public int getParent(){\r\n        return _superCategory;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/DAL/DalStock/DALCategory.java	(revision 064cffa7c531226f4f0ad0a90a21116c4bc61cd5)
+++ src/DAL/DalStock/DALCategory.java	(date 1620744620744)
@@ -17,7 +17,7 @@
     private List<Integer> _productTypes= new ArrayList<>();
     private List<Integer> _productDiscounts=new ArrayList<>();
     private int _storeID;
-    private int _superCategory=0;
+    private Integer _superCategory= null;
     private List<Integer> _categories=new ArrayList<>();
 
 
